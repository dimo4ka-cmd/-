from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_user

ITEMS_PER_PAGE = 5

def get_user_menu():
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –ú–æ—è –æ—á–µ—Ä–µ–¥—å", callback_data="action:queue"),
            InlineKeyboardButton("üí∏ –ë–∞–ª–∞–Ω—Å", callback_data="action:payout")
        ],
        [
            InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="action:add_phone"),
            InlineKeyboardButton("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="action:support")
        ],
        [
            InlineKeyboardButton("üóÑÔ∏è –ê—Ä—Ö–∏–≤", callback_data="action:archive"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action:stats")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_menu():
    """–ê–¥–º–∏–Ω-–º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å", callback_data="action:queue:1"),
            InlineKeyboardButton("üìù –ó–∞—è–≤–∫–∏", callback_data="action:requests:1")
        ],
        [
            InlineKeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç—ã", callback_data="action:payouts"),
            InlineKeyboardButton("üì© –¢–∏–∫–µ—Ç—ã", callback_data="action:tickets:1")
        ],
        [
            InlineKeyboardButton("üîë –ö–æ–¥—ã", callback_data="action:codes"),
            InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="action:block")
        ],
        [
            InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="action:balance"),
            InlineKeyboardButton("üìà –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action:admin_stats")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_ref_code_menu():
    """–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥ ABC123", callback_data="ref_code:ABC123")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_action_menu(action_type: str):
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = []
    if action_type == 'codes':
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–¥", callback_data="action:create_code")])
    elif action_type == 'queue':
        keyboard.append([InlineKeyboardButton("üì§ –í –∞—Ä—Ö–∏–≤", callback_data="action:move_archive")])
    elif action_type == 'payouts':
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="action:update_payout")])
    elif action_type == 'tickets':
        keyboard.append([InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç", callback_data="action:respond_ticket")])
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"action:{action_type}:1")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:back")])
    return InlineKeyboardMarkup(keyboard)

def get_paginated_requests(requests: list, page: int) -> tuple:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞—è–≤–æ–∫"""
    total = len(requests)
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    paginated = requests[start:end]
    
    text = f"üìù <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{max(1, (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)})<br><br>" if paginated else "üìù <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É</b>"
    keyboard = []
    
    for r in paginated:
        user_info = get_user(r[1])
        username = user_info['username'] if user_info else "unknown"
        text += f"üìã <b>ID: {r[0]}</b><br>   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <i>@{username} ({r[1]})</i><br>   –ù–æ–º–µ—Ä: <i>{r[2]}</i><br>   –°—Ç–∞—Ç—É—Å: <i>{r[3]}</i><br>   –î–∞—Ç–∞: <i>{r[4]}</i><br><br>"
        if r[3] == 'pending':
            keyboard.append([
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"action:approve_request:{r[0]}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"action:reject_request:{r[0]}")
            ])
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"action:requests:{page-1}"))
    if end < total:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"action:requests:{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:back")])
    
    return text, InlineKeyboardMarkup(keyboard)

def get_paginated_queue(queue: list, page: int, user_id: str, is_admin: bool = False) -> tuple:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏"""
    total = len(queue)
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    paginated = queue[start:end]
    
    text = f"üìã <b>–û—á–µ—Ä–µ–¥—å</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{max(1, (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)})<br><br>" if paginated else "üìã <b>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</b>"
    keyboard = []
    
    for idx, q in enumerate(paginated, start + 1):
        position = q[3]
        phone = q[2]
        user_info = get_user(q[1])
        username = user_info['username'] if user_info else "unknown"
        if is_admin:
            text += f"üìå <b>{idx}. ID: {q[0]}</b><br>   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <i>@{username} ({q[1]})</i><br>   –ù–æ–º–µ—Ä: <i>{phone}</i><br>   –ü–æ–∑–∏—Ü–∏—è: <i>{position}</i><br><br>"
        else:
            if q[1] == user_id:
                text += f"üìå <b>{idx}. {phone}</b><br>   –ü–æ–∑–∏—Ü–∏—è: <i>{position}</i><br><br>"
    
    if not is_admin and not any(q[1] == user_id for q in queue):
        text += "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏.<br>"
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"action:queue:{page-1}"))
    if end < total:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"action:queue:{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:back")])
    
    return text, InlineKeyboardMarkup(keyboard)

def get_paginated_tickets(tickets: list, page: int) -> tuple:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–∏–∫–µ—Ç–æ–≤"""
    total = len(tickets)
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    paginated = tickets[start:end]
    
    text = f"üì© <b>–¢–∏–∫–µ—Ç—ã</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{max(1, (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)})<br><br>" if paginated else "üì© <b>–ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</b>"
    keyboard = []
    
    for t in paginated:
        user_info = get_user(t[1])
        username = user_info['username'] if user_info else "unknown"
        text += f"üì¨ <b>ID: {t[0]}</b><br>   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <i>@{username} ({t[1]})</i><br>   –í–æ–ø—Ä–æ—Å: <i>{t[2][:50]}{'...' if len(t[2]) > 50 else ''}</i><br>   –°—Ç–∞—Ç—É—Å: <i>{t[4]}</i><br>   –î–∞—Ç–∞: <i>{t[5]}</i><br><br>"
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"action:tickets:{page-1}"))
    if end < total:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"action:tickets:{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="action:back")])
    
    return text, InlineKeyboardMarkup(keyboard)